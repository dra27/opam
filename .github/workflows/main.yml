name: Builds, tests & co

on:
  push:
    paths:
    - 'src/**'
    - '!src/tools/**'
    - 'src_ext/**'
    - 'dune'
    - 'dune-project'
    - '*.opam'
    - 'Makefile*'
    - 'configure*'
    - '.github/**'
  pull_request:
    paths:
    - 'src/**'
    - '!src/tools/**'
    - 'src_ext/**'
    - 'dune'
    - 'dune-project'
    - '*.opam'
    - 'Makefile*'
    - 'configure*'
    - '.github/**'
    - 'tests/**'
#    paths-ignore:
#    - 'release/**'
#    - 'shell/**'
#    - 'admin-scripts/**'
#    - 'doc/**'
#    - 'CHANGES'
#    - 'LICENSE'
#    - 'CONTRIBUTING.md'
#    - 'master_changes.md'
#    - 'README.md'

env:
  OPAMBSVERSION: 2.1.0
  OPAMBSROOT: ~/.cache/.opam.cached
  OPAM12CACHE: ~/.cache/opam1.2/cache
  # These should be identical to the values in appveyor.yml and the other workflows
  OPAM_REPO: https://github.com/ocaml/opam-repository.git
  OPAM_TEST_REPO_SHA: fd4405c83bcd23f91373978b45479694079a8c79
  OPAM_REPO_SHA: fd4405c83bcd23f91373978b45479694079a8c79
  # Default ocaml version for some jobs
  OCAML_VERSION: 4.13.1
  ## variables for cache paths
  GH_OCAML_CACHE: ~/.cache/ocaml-local/**
  SOLVER:

defaults:
  run:
    shell: bash

jobs:

####
# Caches
####
#  ocaml-cache:
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        os: [ ubuntu-latest ]
#        ocamlv: [ 4.02.3, 4.03.0, 4.04.2, 4.05.0, 4.06.1, 4.07.1, 4.08.1, 4.09.1, 4.10.2, 4.11.2 ]
#        include:
#          - os: macos-latest
#            ocamlv: 4.11.2
#      fail-fast: false
#    steps:
#    - uses: actions/checkout@v2
#    - name: ocaml ${{ matrix.ocamlv }} cache
#      id: ocaml-cache
#      uses: actions/cache@v2
#      with:
#        path: ${{ env.GH_OCAML_CACHE }}
#        key: ${{ runner.os }}-ocaml-${{ matrix.ocamlv }}-${{ hashFiles ('.github/scripts/main/ocaml-cache.sh', '.github/scripts/main/preamble.sh') }}
#    - name: Building ocaml ${{ matrix.ocamlv }} cache
#      if: steps.ocaml-cache.outputs.cache-hit != 'true'
#      env:
#        OCAML_VERSION: ${{ matrix.ocamlv }}
#      run: bash -exu .github/scripts/main/ocaml-cache.sh ocaml

  Analyse:
    runs-on: ubuntu-latest
    outputs:
      archives: ${{ steps.keys.outputs.archives }}
      ocaml-secondary-compiler: ${{ steps.keys.outputs.ocaml-secondary-compiler }}
    steps:
    - name: Configure Git for Windows
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        git config --system core.autocrlf false
        git config --system core.eol lf
    - name: Checkout tree
      uses: actions/checkout@v2
    - name: Determine cache keys
      id: keys
      run: |
        echo archives=archives-${{ hashFiles('src_ext/Makefile.sources', 'src_ext/Makefile', '.github/scripts/common/preamble.sh', '.github/scripts/main/preamble.sh', '.github/scripts/main/archives-cache.sh') }}-${{ env.OPAM_REPO_SHA }}
        echo ::set-output name=archives::archives-${{ hashFiles('src_ext/Makefile.sources', 'src_ext/Makefile', '.github/scripts/common/preamble.sh', '.github/scripts/main/preamble.sh', '.github/scripts/main/archives-cache.sh') }}-${{ env.OPAM_REPO_SHA }}
        echo ocaml-secondary-compiler=legacy-${{ env.OPAM_REPO_SHA }}
        echo ::set-output name=ocaml-secondary-compiler::legacy-${{ env.OPAM_REPO_SHA }}
    - name: src_ext/archives and opam-repository Cache
      id: archives
      if: runner.os == 'Linux'
      uses: dra27/cache@opam
      with:
        path: |
          src_ext/archives
          ~/opam-repository
        key: ${{ steps.keys.outputs.archives }}
        check-only: true
        force-gzip: true
    - name: Create src_ext/archives and opam-repository cache
      if: runner.os != 'Windows' && steps.archives.outputs.cache-hit != 'true'
      run: bash -exu .github/scripts/main/archives-cache.sh
    - name: ocaml-secondary-compiler Cache
      id: legacy
      if: runner.os != 'Windows'
      uses: dra27/cache@opam
      with:
        path: ~/.opam
        key: ${{ runner.os }}-${{ steps.keys.outputs.ocaml-secondary-compiler }}
        check-only: true
    - name: Install system's opam package
      if: (runner.os == 'Linux' || runner.os == 'macOS') && steps.legacy.outputs.cache-hit != 'true'
      run: |
        ( test '${{ runner.os }}' == Linux && sudo apt install opam ) || true
        ( test '${{ runner.os }}' == macOS && brew install opam ) || true
    - name: Create ocaml-secondary-compiler cache
      if: runner.os != 'Windows' && steps.legacy.outputs.cache-hit != 'true'
      run: bash -exu .github/scripts/main/legacy-cache.sh

####
# Build
####
  Build:
    runs-on: ${{ matrix.os }}
    needs: Analyse
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        ocamlv: [ 4.08.1, 4.09.1, 4.10.2, 4.11.2, 4.12.1, 4.13.1 ]
        include:
          - os: macos-latest
            ocamlv: 4.13.1
      # Intentionally fail fast, no need to run all build if there is a
      # problem in a given version; usually it is functions not defined in lower
      # versions of OCaml
      fail-fast: true
    steps:
    - name: Install deps
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: sudo apt install bubblewrap
    - name: Checkout tree
      uses: actions/checkout@v2
    - name: src_ext/archives and opam-repository Cache
      id: archives
      uses: dra27/cache@opam
      with:
        path: |
          src_ext/archives
          ~/opam-repository
        key: ${{ needs.Analyse.outputs.archives }}
        force-gzip: true
    - name: OCaml ${{ matrix.ocamlv }} Cache
      id: ocaml-cache
      uses: actions/cache@v2
      with:
        path: ${{ env.GH_OCAML_CACHE }}
        key: ${{ runner.os }}-ocaml-${{ matrix.ocamlv }}-${{ hashFiles ('.github/scripts/main/ocaml-cache.sh', '.github/scripts/main/preamble.sh') }}
    - name: Create OCaml ${{ matrix.ocamlv }} cache
      if: steps.ocaml-cache.outputs.cache-hit != 'true'
      env:
        OCAML_VERSION: ${{ matrix.ocamlv }}
      run: bash -exu .github/scripts/main/ocaml-cache.sh ocaml
    - name: Build
      env:
        OCAML_VERSION: ${{ matrix.ocamlv }}
      run: bash -exu .github/scripts/main/main.sh

####
# Legacy
####
  Legacy:
    runs-on: ubuntu-latest
    needs: [ Analyse, Build ]
    strategy:
      matrix:
        os: [ ubuntu ]
        ocamlv: [ 4.03.0, 4.04.2, 4.05.0, 4.06.1, 4.07.1 ]
      # Intentionally fail fast, no need to run all build if there is a
      # problem in a given version; usually it is functions not defined in lower
      # versions of OCaml
      fail-fast: true
    steps:
    - name: Install system's opam package
      run: sudo apt install opam
    - name: Checkout tree
      uses: actions/checkout@v2
    - name: ocaml-secondary-compiler Cache
      id: legacy
      uses: actions/cache@v2
      with:
        path: ~/.opam
        key: ${{ runner.os }}-${{ needs.Analyse.outputs.ocaml-secondary-compiler }}
    - name: Create ocaml-secondary-compiler cache
      if: steps.legacy.outputs.cache-hit != 'true'
      run: bash -exu .github/scripts/legacy-cache.sh
    - name: OCaml ${{ matrix.ocamlv }} Cache
      id: ocaml-cache
      uses: actions/cache@v2
      with:
        path: ${{ env.GH_OCAML_CACHE }}
        key: ${{ runner.os }}-ocaml-${{ matrix.ocamlv }}-${{ hashFiles ('.github/scripts/main/ocaml-cache.sh', '.github/scripts/main/preamble.sh') }}
    - name: Create OCaml ${{ matrix.ocamlv }} cache
      if: steps.ocaml-cache.outputs.cache-hit != 'true'
      env:
        OCAML_VERSION: ${{ matrix.ocamlv }}
      run: bash -exu .github/scripts/main/ocaml-cache.sh ocaml
    - name: Build
      env:
        OCAML_VERSION: ${{ matrix.ocamlv }}
      run: bash -exu .github/scripts/main/legacy.sh

####
# Opam tests
####
  Test:
    runs-on: ${{ matrix.os }}
    needs: [ Analyse, Build ]
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        ocamlv: [ 4.13.1 ]
      fail-fast: false
    env:
      OPAM_TEST: 1
    steps:
    - name: Checkout tree
      uses: actions/checkout@v2
    - name: Install deps
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: sudo apt install bubblewrap
    - name: src_ext/archives and opam-repository Cache
      id: archives
      uses: dra27/cache@opam
      with:
        path: |
          src_ext/archives
          ~/opam-repository
        key: ${{ needs.Analyse.outputs.archives }}
        force-gzip: true
    - name: OCaml ${{ matrix.ocamlv }} Cache - test
      id: ocaml-cache-test
      uses: actions/cache@v2
      with:
        path: ${{ env.GH_OCAML_CACHE }}
        key: ${{ runner.os }}-ocaml-${{ matrix.ocamlv }}-${{ hashFiles ('.github/scripts/main/ocaml-cache.sh', '.github/scripts/main/preamble.sh') }}-test
    - name: Create OCaml ${{ env.OCAML_VERSION }} cache - test
      if: steps.ocaml-cache-test.outputs.cache-hit != 'true'
      env:
        OCAML_VERSION: ${{ matrix.ocamlv }}
      run: bash -exu .github/scripts/main/ocaml-cache.sh ocaml
    - name: opam bootstrap cache
      id: opam-bootstrap
      uses: actions/cache@v2
      with:
        path: |
          ${{ env.OPAMBSROOT }}/**
          ~/.cache/opam-local/bin/**
        key: opam-${{ runner.os }}-${{ env.OPAMBSVERSION }}-${{ matrix.ocamlv }}-${{ env.OPAM_REPO_SHA }}-${{ hashFiles ('.github/scripts/main/opam-bs-cache.sh', '.github/scripts/main/preamble.sh') }}
    - name: Create opam bootstrap cache
      if: steps.opam-bootstrap.outputs.cache-hit != 'true'
      run: bash -exu .github/scripts/main/opam-bs-cache.sh
    - name: opam-rt Cache
      id: opam-rt
      uses: actions/cache@v2
      with:
        path: ~/.cache/opam-rt/**
        key: ${{ runner.os }}-opam-rt-${{ matrix.ocamlv }}
    - name: Build (and test)
      env:
        OCAML_VERSION: ${{ matrix.ocamlv }}
      run: bash -exu .github/scripts/main/main.sh

####
# Opam cold
####
  Cold:
    runs-on: ${{ matrix.os }}
    needs: [ Analyse, Build ]
    strategy:
      matrix:
#        os: [ ubuntu-latest, macos-latest ]
        os: [ ubuntu-latest ]
        ocamlv: [ 4.13.1 ]
      fail-fast: false
    steps:
    - name: Install deps
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: sudo apt install bubblewrap
    - name: Checkout tree
      uses: actions/checkout@v2
    - name: src_ext/archives and opam-repository Cache
      id: archives
      uses: dra27/cache@opam
      with:
        path: |
          src_ext/archives
          ~/opam-repository
        key: ${{ needs.Analyse.outputs.archives }}
        force-gzip: true
    - name: Cold
      env:
        OCAML_VERSION: ${{ matrix.ocamlv }}
        OPAM_COLD: 1
      run: |
        make compiler
        make lib-pkg
        bash -exu .github/scripts/main/main.sh

####
# Compile solver backends
####
  Solvers:
    runs-on: ${{ matrix.os }}
    needs: [ Analyse, Build ]
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        solver: [ z3, 0install ]
        ocamlv: [ 4.13.1 ]
      fail-fast: false
    env:
      SOLVER: ${{ matrix.solver }}
      OPAMBSROOT: ~/.cache/opam.${{ matrix.solver }}.cached
    steps:
    - name: Install deps
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: sudo apt install bubblewrap
    - name: Checkout tree
      uses: actions/checkout@v2
    - name: src_ext/archives and opam-repository Cache
      id: archives
      uses: dra27/cache@opam
      with:
        path: |
          src_ext/archives
          ~/opam-repository
        key: ${{ needs.Analyse.outputs.archives }}
        force-gzip: true
    - name: OCaml ${{ matrix.ocamlv }} Cache - test
      id: ocaml-cache-test
      uses: actions/cache@v2
      with:
        path: ${{ env.GH_OCAML_CACHE }}
        key: ${{ runner.os }}-ocaml-${{ matrix.ocamlv }}-${{ matrix.solver }}-${{ hashFiles ('.github/scripts/main/ocaml-cache.sh', '.github/scripts/main/preamble.sh') }}-test
    - name: Create OCaml ${{ env.OCAML_VERSION }} cache - test
      if: steps.ocaml-cache-test.outputs.cache-hit != 'true'
      env:
        OCAML_VERSION: ${{ matrix.ocamlv }}
      run: bash -exu .github/scripts/main/ocaml-cache.sh ocaml
    - name: opam bootstrap Cache
      id: opam-bootstrap
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/opam.${{ matrix.solver }}.cached
          ~/.cache/opam-local/bin/**
        key: opam-${{ matrix.solver }}-${{ runner.os }}-${{ env.OPAMBSVERSION }}-${{ matrix.ocamlv }}-${{ env.OPAM_REPO_SHA }}-${{ hashFiles ('.github/scripts/main/opam-bs-cache.sh', '.github/scripts/main/preamble.sh') }}
    - name: Create opam bootstrap cache
      env:
        OPAMBSROOT: ~/.cache/opam.${{ matrix.solver }}.cached
      if: steps.opam-bootstrap.outputs.cache-hit != 'true'
      run: bash -exu .github/scripts/main/opam-bs-cache.sh
    - name: Compile
      env:
        OCAML_VERSION: ${{ matrix.ocamlv }}
      run: bash -exu .github/scripts/main/solvers.sh

####
# Upgrade from 1.2 to current
####
  Upgrade:
    runs-on: ${{ matrix.os }}
    needs: [ Build ]
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        ocamlv: [ 4.13.1 ]
      fail-fast: false
    steps:
    - name: Install deps
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: sudo apt install bubblewrap
    - name: Checkout tree
      uses: actions/checkout@v2
    - name: opam 1.2 root Cache
      uses: actions/cache@v2
      with:
        path: ${{ env.OPAM12CACHE }}
        key: ${{ runner.os }}-opam1.2-root
    - name: OCaml ${{ matrix.ocamlv }} Cache
      id: ocaml-cache
      uses: actions/cache@v2
      with:
        path: ${{ env.GH_OCAML_CACHE }}
        key: ${{ runner.os }}-ocaml-${{ matrix.ocamlv }}-${{ hashFiles ('.github/scripts/main/ocaml-cache.sh', '.github/scripts/main/preamble.sh') }}
    - name: Create OCaml ${{ matrix.ocamlv }} cache
      if: steps.ocaml-cache.outputs.cache-hit != 'true'
      env:
        OCAML_VERSION: ${{ matrix.ocamlv }}
      run: bash -exu .github/scripts/main/ocaml-cache.sh ocaml
    - name: Test (upgrade)
      env:
        OCAML_VERSION: ${{ matrix.ocamlv }}
        OPAM_UPGRADE: 1
      run: bash -exu .github/scripts/main/main.sh

####
# Around opam tests
####
  Hygiene:
    runs-on: ubuntu-latest
    needs: Analyse
    steps:
    - name: Checkout tree
      uses: actions/checkout@v2
    - name: src_ext/archives and opam-repository Cache
      id: archives
      uses: dra27/cache@opam
      with:
        path: |
          src_ext/archives
          ~/opam-repository
        key: ${{ needs.Analyse.outputs.archives }}
        force-gzip: true
    - name: Get changed files
      id: files
      uses: jitterbit/get-changed-files@v1
      # see https://github.com/jitterbit/get-changed-files/issues/19
      continue-on-error: true
    - name: Changed files list
      run: |
        for changed_file in ${{ steps.files.outputs.modified }}; do
          echo "M  ${changed_file}."
        done
        for changed_file in ${{ steps.files.outputs.removed }}; do
          echo "D  ${changed_file}."
        done
        for changed_file in ${{ steps.files.outputs.added }}; do
          echo "A  ${changed_file}."
        done
        for changed_file in ${{ steps.files.outputs.renamed }}; do
          echo "AD ${changed_file}."
        done
    - name: Hygiene
      env:
        # Defined only on pull request jobs
        BASE_REF_SHA: ${{ github.event.pull_request.base.sha }}
        PR_REF_SHA: ${{ github.event.pull_request.head.sha }}
      if: contains(steps.files.outputs.modified, 'configure.ac') || contains(steps.files.outputs.all, 'src_ext')
      run: bash -exu .github/scripts/main/hygiene.sh
