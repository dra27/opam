(* -*- tuareg -*- *)

module J = Jbuild_plugin.V1

let (cc64_build, build_putenv) =
  let cc64 =
    try
      let c = open_in "../cc64.sexp" in
      try
        input_line c
      with End_of_file ->
        ""
    with Sys_error _ ->
      ""
  in
  if cc64 = "" then ("(echo no)", "") else (cc64, {|
(install
  ((section bin)
   (package opam)
   (files (opam-putenv.exe))))
|})

let () = Printf.ksprintf J.send {|
(jbuild_version 1)

(executable
  ((name opam_admin_topstart)
   (modules (opam_admin_top opam_admin_topstart))
   (ocamlc_flags (:standard (:include ../ocaml-flags-standard.sexp) (:include ../ocaml-context-flags.sexp) -linkall))
   (libraries (opam-client opam-file-format compiler-libs.toplevel re.glob))))

(rule (with-stdout-to opam_admin_topstart.ml (echo "include Opam_admin_top\n\nlet _ = Topmain.main ()")))

(install
  ((section bin)
   (package opam-admin)
   (files ((opam_admin_topstart.bc as opam-admin.top)))))
(install
  ((section lib)
   (package opam-admin)
   (files (opam_admin_top.cmi))))

(executable
  ((name opam_check)
   (modules (opam_check))
   (flags (:standard (:include ../ocaml-flags-standard.sexp) (:include ../ocaml-context-flags.sexp)))
   (libraries (opam-client))))

(rule
  ((targets (opam-putenv.exe))
   (deps    (opam-putenv.c ../core/opamInject.c))
   (action  %s)))
%s
(executable
  ((name opam_installer)
   (package opam)
   (public_name opam-installer)
   (modules (opam_installer))
   (libraries (opam-state cmdliner))
   (flags (:standard (:include ../ocaml-flags-standard.sexp) (:include ../ocaml-context-flags.sexp)))))
|} cc64_build build_putenv
